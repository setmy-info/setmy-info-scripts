# PLACEHOLDER-BEGIN #
MESSAGE("-- variables.cmake")

SET (PROVIDER "setmy.info")

IF (${CMAKE_SYSTEM_PROCESSOR} MATCHES i386|i586|i686)
        set ( ARCH "32")
ELSE ()
        set ( ARCH "64")
ENDIF ()

IF(EXISTS "/etc/debian_version")
    SET ( DISTRIBUTION "Debian")
ENDIF()
IF(EXISTS "/etc/redhat-release")
   SET ( DISTRIBUTION "RedHat")
ENDIF()
IF(EXISTS "/bin/freebsd-version")
   SET ( DISTRIBUTION "FreeBSD")
ENDIF()

IF(${PROJECT_IS_SNAPSHOT})
    MESSAGE("====== PROJECT IS SNAPSHOT ======")
   SET (PROJECT_VERSION             ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}-SNAPSHOT)
ELSE()
    MESSAGE("====== PROJECT IS NOT SNAPSHOT ======")
    SET (PROJECT_VERSION            ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH})
ENDIF()
SET (PROJECT_PATH                   ${PROJECT_BINARY_DIR})
SET (TARGET_PATH                    ${PROJECT_PATH}/target)
SET (BUILD_TYPE_TARGET_PATH         ${TARGET_PATH}/${CMAKE_BUILD_TYPE})
SET (BUILD_PATH                     ${BUILD_TYPE_TARGET_PATH}/build)
SET (BINARY_OUTPUT_PATH             ${BUILD_PATH}/bin)
SET (LIBRARY_OUTPUT_PATH            ${BUILD_PATH}/lib)
SET (MAN_OUTPUT_PATH                ${BUILD_PATH}/man)
SET (DOC_OUTPUT_PATH                ${BUILD_PATH}/doc)
SET (ETC_OUTPUT_PATH                ${BUILD_PATH}/etc)
SET (ETC_PROFILED_OUTPUT_PATH       ${ETC_OUTPUT_PATH}/profile.d)
SET (ETC_SYSTEMD_OUTPUT_PATH        ${ETC_OUTPUT_PATH}/systemd)
SET (INCLUDE_OUTPUT_PATH            ${BUILD_PATH}/include)
SET (INFO_OUTPUT_PATH               ${BUILD_PATH}/info)
SET (ETC_SYSTEM_OUTPUT_PATH         ${ETC_SYSTEMD_OUTPUT_PATH}/system)
SET (SOURCES_PATH                   ${PROJECT_PATH}/src)
SET (MAIN_SOURCES_PATH              ${SOURCES_PATH}/main)
SET (TEST_SOURCES_PATH              ${SOURCES_PATH}/test)
SET (MAIN_RESOURCES_PATH            ${MAIN_SOURCES_PATH}/resources)
SET (MAIN_CMAKE_PATH                ${MAIN_RESOURCES_PATH}/cmake)
SET (MAIN_SH_CMAKE_PATH             ${MAIN_CMAKE_PATH}/sh)
SET (MAIN_CPP_CMAKE_PATH            ${MAIN_CMAKE_PATH}/cpp)
SET (MAIN_CMD_SOURCES_PATH          ${MAIN_SOURCES_PATH}/cmd)
SET (MAIN_SH_SOURCES_PATH           ${MAIN_SOURCES_PATH}/sh)
SET (MAIN_GROOVY_SOURCES_PATH       ${MAIN_SOURCES_PATH}/groovy)
SET (MAIN_PYTHON_SOURCES_PATH       ${MAIN_SOURCES_PATH}/python)
SET (MAIN_COMMON_LISP_SOURCES_PATH  ${MAIN_SOURCES_PATH}/cl)
SET (MAIN_MAN_SOURCES_PATH          ${MAIN_SOURCES_PATH}/man)
SET (MAIN_CPP_SOURCES_PATH          ${MAIN_SOURCES_PATH}/cpp)
SET (MAIN_JAVA_SOURCES_PATH         ${MAIN_SOURCES_PATH}/java)
SET (MAIN_INCLUDES_PATH             ${MAIN_CPP_SOURCES_PATH}/include)
SET (TEST_RESOURCES_PATH            ${TEST_SOURCES_PATH}/resources)
SET (TEST_CMAKE_PATH                ${TEST_RESOURCES_PATH}/cmake)
SET (TEST_SH_CMAKE_PATH             ${TEST_CMAKE_PATH}/sh)
SET (TEST_CPP_CMAKE_PATH            ${TEST_CMAKE_PATH}/cpp)
SET (TEST_CMD_SOURCES_PATH          ${TEST_SOURCES_PATH}/cmd)
SET (TEST_SH_SOURCES_PATH           ${TEST_SOURCES_PATH}/sh)
SET (TEST_GROOVY_SOURCES_PATH       ${TEST_SOURCES_PATH}/groovy)
SET (TEST_PYTHON_SOURCES_PATH       ${TEST_SOURCES_PATH}/python)
SET (TEST_COMMON_LISP_SOURCES_PATH  ${TEST_SOURCES_PATH}/cl)
SET (TEST_MAN_SOURCES_PATH          ${TEST_SOURCES_PATH}/man)
SET (TEST_CPP_SOURCES_PATH          ${TEST_SOURCES_PATH}/cpp)
SET (TEST_JAVA_SOURCES_PATH         ${MAIN_SOURCES_PATH}/java)
SET (TEST_INCLUDES_PATH             ${TEST_CPP_SOURCES_PATH}/include)
SET (RPM_INSTALL_SCRIPTS_PATH       ${MAIN_SH_SOURCES_PATH}/rpm)
SET (DEFAULT_PACKAGES               "TGZ;STGZ;7Z;TBZ2;TXZ;TZ;ZIP")
SET (EXECUTABLE_OUTPUT_PATH         ${BINARY_OUTPUT_PATH})
SET (CHANGE_LOG_FILE_NAME           ${PROJECT_PATH}/changelog)

IF(EXISTS ${MAIN_CPP_CMAKE_PATH}/variables.cmake)
    INCLUDE(${MAIN_CPP_CMAKE_PATH}/variables.cmake)
ENDIF()

SET (CMAKE_CONFIGURATION_TYPES "Release;RelWithDebInfo;Debug" CACHE STRING "Configurations" FORCE)

SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS true)

IF(CMAKE_CONFIGURATION_TYPES)
   SET(CMAKE_CONFIGURATION_TYPES Debug Release)
   SET(CMAKE_CONFIGURATION_TYPES   "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING "Reset the configurations" FORCE)
ENDIF()

IF(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    SET (CMAKE_INSTALL_PREFIX  "/opt/${PROVIDER}")
    IF("${CONFIGURE_MODE}" STREQUAL "Developer")
        SET (SCRIPTS_INSTALL_PREFIX  "${BUILD_PATH}")
    ELSEIF("${CONFIGURE_MODE}" STREQUAL "Real")
        # Indicates, that installation goes into real installation location. SCRIPTS_INSTALL_PREFIX is used in scripts
        # by configure
        SET (SCRIPTS_INSTALL_PREFIX  "${CMAKE_INSTALL_PREFIX}")
    ENDIF()
ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
    SET (CMAKE_INSTALL_PREFIX  "/usr/local")
    IF("${CONFIGURE_MODE}" STREQUAL "Developer")
        SET (SCRIPTS_INSTALL_PREFIX  "${BUILD_PATH}")
    ELSEIF("${CONFIGURE_MODE}" STREQUAL "Real")
        SET (SCRIPTS_INSTALL_PREFIX  "${CMAKE_INSTALL_PREFIX}")
    ENDIF()
    set(CPACK_ENABLE_FREEBSD_PKG ON CACHE BOOL "Enable pkg(8) generator in CPack")
ENDIF()

MESSAGE("-- CMAKE_SYSTEM_INFO_FILE: ${CMAKE_SYSTEM_INFO_FILE}")
MESSAGE("-- CMAKE_SYSTEM_NAME:      ${CMAKE_SYSTEM_NAME}")
MESSAGE("-- CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")
MESSAGE("-- CMAKE_SYSTEM:           ${CMAKE_SYSTEM}")
MESSAGE("-- CMAKE_HOST_UNIX:        ${CMAKE_HOST_UNIX}")
MESSAGE("-- CMAKE_SYSTEM_VERSION:   ${CMAKE_SYSTEM_VERSION}")
MESSAGE("-- DISTRIBUTION:           ${DISTRIBUTION}")
MESSAGE("-- PROJECT_VERSION:        ${PROJECT_VERSION}")
MESSAGE("-- PROJECT_PATH:           ${PROJECT_PATH}")
MESSAGE("-- CMAKE_BUILD_TYPE:       ${CMAKE_BUILD_TYPE}")
MESSAGE("-- PROJECT_BINARY_DIR:     ${PROJECT_BINARY_DIR}")
MESSAGE("-- CMAKE_INSTALL_PREFIX:   ${CMAKE_INSTALL_PREFIX}")
MESSAGE("-- SCRIPTS_INSTALL_PREFIX: ${SCRIPTS_INSTALL_PREFIX}")
MESSAGE("-- TARGET_PATH: ${TARGET_PATH}")
MESSAGE("-- BUILD_TYPE_TARGET_PATH: ${BUILD_TYPE_TARGET_PATH}")
MESSAGE("-- BUILD_PATH: ${BUILD_PATH}")
MESSAGE("-- BINARY_OUTPUT_PATH: ${BINARY_OUTPUT_PATH}")
MESSAGE("-- LIBRARY_OUTPUT_PATH: ${LIBRARY_OUTPUT_PATH}")
MESSAGE("-- MAN_OUTPUT_PATH: ${MAN_OUTPUT_PATH}")
MESSAGE("-- DOC_OUTPUT_PATH: ${DOC_OUTPUT_PATH}")
MESSAGE("-- ETC_OUTPUT_PATH: ${ETC_OUTPUT_PATH}")
MESSAGE("-- ETC_PROFILED_OUTPUT_PATH: ${ETC_PROFILED_OUTPUT_PATH}")
MESSAGE("-- ETC_SYSTEMD_OUTPUT_PATH: ${ETC_SYSTEMD_OUTPUT_PATH}")
MESSAGE("-- INCLUDE_OUTPUT_PATH: ${INCLUDE_OUTPUT_PATH}")
MESSAGE("-- INFO_OUTPUT_PATH: ${INFO_OUTPUT_PATH}")
MESSAGE("-- ETC_SYSTEM_OUTPUT_PATH: ${ETC_SYSTEM_OUTPUT_PATH}")
MESSAGE("-- SOURCES_PATH: ${SOURCES_PATH}")
MESSAGE("-- MAIN_SOURCES_PATH: ${MAIN_SOURCES_PATH}")
MESSAGE("-- TEST_SOURCES_PATH: ${TEST_SOURCES_PATH}")
MESSAGE("-- MAIN_RESOURCES_PATH: ${MAIN_RESOURCES_PATH}")
MESSAGE("-- MAIN_CMAKE_PATH: ${MAIN_CMAKE_PATH}")
MESSAGE("-- MAIN_SH_CMAKE_PATH: ${MAIN_SH_CMAKE_PATH}")
MESSAGE("-- MAIN_CPP_CMAKE_PATH: ${MAIN_CPP_CMAKE_PATH}")
MESSAGE("-- MAIN_CMD_SOURCES_PATH: ${MAIN_CMD_SOURCES_PATH}")
MESSAGE("-- MAIN_SH_SOURCES_PATH: ${MAIN_SH_SOURCES_PATH}")
MESSAGE("-- MAIN_GROOVY_SOURCES_PATH: ${MAIN_GROOVY_SOURCES_PATH}")
MESSAGE("-- MAIN_PYTHON_SOURCES_PATH: ${MAIN_PYTHON_SOURCES_PATH}")
MESSAGE("-- MAIN_COMMON_LISP_SOURCES_PATH: ${MAIN_COMMON_LISP_SOURCES_PATH}")
MESSAGE("-- MAIN_MAN_SOURCES_PATH: ${MAIN_MAN_SOURCES_PATH}")
MESSAGE("-- MAIN_CPP_SOURCES_PATH: ${MAIN_CPP_SOURCES_PATH}")
MESSAGE("-- MAIN_JAVA_SOURCES_PATH: ${MAIN_JAVA_SOURCES_PATH}")
MESSAGE("-- MAIN_INCLUDES_PATH: ${MAIN_INCLUDES_PATH}")
MESSAGE("-- TEST_RESOURCES_PATH: ${TEST_RESOURCES_PATH}")
MESSAGE("-- TEST_CMAKE_PATH: ${TEST_CMAKE_PATH}")
MESSAGE("-- TEST_SH_CMAKE_PATH: ${TEST_SH_CMAKE_PATH}")
MESSAGE("-- TEST_CPP_CMAKE_PATH: ${TEST_CPP_CMAKE_PATH}")
MESSAGE("-- TEST_CMD_SOURCES_PATH: ${TEST_CMD_SOURCES_PATH}")
MESSAGE("-- TEST_SH_SOURCES_PATH: ${TEST_SH_SOURCES_PATH}")
MESSAGE("-- TEST_GROOVY_SOURCES_PATH: ${TEST_GROOVY_SOURCES_PATH}")
MESSAGE("-- TEST_PYTHON_SOURCES_PATH: ${TEST_PYTHON_SOURCES_PATH}")
MESSAGE("-- TEST_COMMON_LISP_SOURCES_PATH: ${TEST_COMMON_LISP_SOURCES_PATH}")
MESSAGE("-- TEST_MAN_SOURCES_PATH: ${TEST_MAN_SOURCES_PATH}")
MESSAGE("-- TEST_CPP_SOURCES_PATH: ${TEST_CPP_SOURCES_PATH}")
MESSAGE("-- TEST_JAVA_SOURCES_PATH: ${TEST_JAVA_SOURCES_PATH}")
MESSAGE("-- TEST_INCLUDES_PATH: ${TEST_INCLUDES_PATH}")
MESSAGE("-- RPM_INSTALL_SCRIPTS_PATH: ${RPM_INSTALL_SCRIPTS_PATH}")
MESSAGE("-- DEFAULT_PACKAGES: ${DEFAULT_PACKAGES}")
MESSAGE("-- EXECUTABLE_OUTPUT_PATH: ${EXECUTABLE_OUTPUT_PATH}")
MESSAGE("-- CMAKE_COMMAND: ${CMAKE_COMMAND}")
MESSAGE("-- CHANGE_LOG_FILE_NAME: ${CHANGE_LOG_FILE_NAME}")

# PLACEHOLDER-END #
